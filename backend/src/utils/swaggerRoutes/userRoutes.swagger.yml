paths:
  /api/users/signup/user:
    post:
      summary: Create a new user account
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  example: Password1!
                firstname:
                  type: string
                  example: John
                lastname:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/InlineUser"
        "400":
          description: Validation error
        "409":
          description: Username or email already taken
        "500":
          description: Server error

  /api/users/signup/admin:
    post:
      summary: Create a new admin account
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: adminuser
                password:
                  type: string
                  example: AdminPass1!
                firstname:
                  type: string
                  example: Alice
                lastname:
                  type: string
                  example: Admin
                email:
                  type: string
                  format: email
                  example: alice@example.com
      responses:
        "201":
          description: Admin created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/InlineUser"
        "400":
          description: Missing required fields or validation error
        "401":
          description: Unauthorized (no or invalid token)
        "403":
          description: Forbidden (not an ADMIN)
        "409":
          description: Username or email already taken
        "500":
          description: Server error

  /api/users:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/InlineUser"
        '401':
          description: Unauthorized - no token or invalid token
        '500':
          description: Internal Server Error

  /api/users/username/{username}:
    get:
      summary: Get user by username
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username of the user to fetch
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/InlineUser"
        '400':
          description: Bad request - missing username
        '401':
          description: Unauthorized - no token or invalid token
        '500':
          description: Internal Server Error

  /api/users/toggle-admin/{id}:
    put:
      summary: Toggle admin privileges for a user (admin only)
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID to toggle admin role
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User role toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/InlineUser"
        '400':
          description: Bad request (e.g., trying to remove own admin role)
        '401':
          description: Unauthorized (no token or invalid token)
        '403':
          description: Forbidden (only admins can toggle roles)
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/InlineUser"
        '400':
          description: Bad request - missing ID
        '401':
          description: Unauthorized - no token or invalid token
        '500':
          description: Internal Server Error

    put:
      summary: Update user by ID (admin or self)
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Partial user data to update
              properties:
                username:
                  type: string
                password:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                email:
                  type: string
                  format: email
                roles:
                  type: array
                  items:
                    type: string
              example:
                username: newusername
                password: NewPass1!
                email: newemail@example.com
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/InlineUser"
        '400':
          description: Validation error or missing ID
        '401':
          description: Unauthorized (no token or invalid)
        '403':
          description: Forbidden (not admin or not updating own profile)
        '404':
          description: User not found
        '409':
          description: Username already taken
        '500':
          description: Internal server error

    delete:
      summary: Delete user by ID (admin only)
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User johndoe deleted successfully
        '400':
          description: Missing or invalid user ID
        '401':
          description: Unauthorized (no token or invalid)
        '403':
          description: Forbidden (only admin allowed)
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/users/email/{email}:
    get:
      summary: Get user by email
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
          description: Email of the user to fetch
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/InlineUser"
        '400':
          description: Bad request - missing email
        '401':
          description: Unauthorized - no token or invalid token
        '404':
          description: User not found
        '500':
          description: Internal Server Error

  /api/auth/refresh:
    post:
      summary: Refresh JWT token
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: |
        Returns a new JWT token for the currently logged-in user.
        Useful when user information has changed (e.g., profile update) so the token payload is up-to-date.
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: New JWT token
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Invalid token"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "User not found"
        '500':
          description: Internal Server Error
          
  /api/users/self/{id}:
    delete:
      summary: Delete own user account (self)
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID (must match the logged-in user)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User johndoe deleted successfully"
        '400':
          description: Missing or invalid user ID
        '401':
          description: Unauthorized (no token or invalid token)
        '403':
          description: Forbidden (user ID does not match self, not admin)
        '404':
          description: User not found
        '500':
          description: Internal server error

components:
  schemas:
    InlineUser:
      type: object
      properties:
        _id:
          type: string
          example: 64f1b8a97c05f9a4d9d12345
        id:
          type: string
          example: 64f1b8a97c05f9a4d9d12345
        username:
          type: string
          example: johndoe
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@example.com
        phone:
          type: array
          items:
            type: string
          example: ["+302101234567"]
        AFM:
          type: string
          example: "123456789"
        building:
          type: string
          example: "Building A"
        flat:
          type: string
          example: "2B"
        balance:
          type: number
          example: 100.5
        lastClearedMonth:
          type: string
          format: date-time
          example: 2025-08-01T00:00:00.000Z
        notes:
          type: array
          items:
            type: string
          example: ["Good payer"]
        uploadsMongo:
          type: array
          items:
            type: string
        uploadsAppwrite:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
            enum: [USER, ADMIN]
          example: ["USER"]
        hasPassword:
          type: boolean
          example: true
        provider:
          type: string
          example: backend
        createdAt:
          type: string
          format: date-time
          example: 2025-09-26T10:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-09-26T10:00:00.000Z
          
  /api/users/{id}/balance:
    get:
      summary: Get the balance of a user (sum of unpaid bills)
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: 64f1b8a97c05f9a4d9d12345
                      balance:
                        type: number
                        example: 123.45
        '400':
          description: Bad request - missing ID
        '401':
          description: Unauthorized - no token or invalid
        '404':
          description: User not found
        '500':
          description: Internal server error
