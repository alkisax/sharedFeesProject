openapi: 3.0.0
info:
  title: Flat Economics API
  version: 1.0.0

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        username: { type: string }
        name: { type: string }
        email: { type: string }
        roles:
          type: array
          items: { type: string }

    Bill:
      type: object
      properties:
        id:
          type: string
          example: 64f9c2c9d5c3a01234567890
        userId:
          type: string
          example: 64f9c2c9d5c3a0987654321
        globalBillId:
          type: string
          example: 64f9c2c9d5c3a01234567890
        month:
          type: string
          example: '2025-07'
        building:
          type: string
          example: 'ΠΟΛΥΚΑΤΟΙΚΙΑ ΚΑΤΕΡΙΝΗΣ 18'
        flat:
          type: string
          example: 'ΙΣ'
        ownerName:
          type: string
          example: 'Δρακοπούλου'
        share:
          type: number
          example: 99.7
        breakdown:
          type: object
          additionalProperties: { type: number }
          example:
            ΔΕΗ: 15.15
            Καθαριότητα: 6.48
            Ασανσέρ: 3.11
        amount:
          type: number
          example: 27.25
        status:
          type: string
          enum: [UNPAID, PENDING, PAID, CANCELED]
          example: UNPAID
        receiptUrl:
          type: string
          example: 'https://appwrite.io/storage/receipt123.pdf'
        notes:
          type: array
          items: { type: string }
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /api/auth:
    post:
      summary: Log in a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        '200': { description: Login successful }

  /api/auth/refresh:
    post:
      summary: Refresh JWT token
      tags: [Auth]
      responses:
        '200': { description: Token refreshed }

  /api/users/signup/user:
    post:
      summary: Create a new user account
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string }
                name: { type: string }
                email: { type: string, format: email }
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }

  /api/users/signup/admin:
    post:
      summary: Create a new admin account
      tags: [Users]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string }
                name: { type: string }
                email: { type: string, format: email }
      responses:
        '201': { description: Admin created successfully }

  /api/users:
    get:
      summary: Get all users
      tags: [Users]
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/User' }

  /api/users/username/{username}:
    get:
      summary: Get user by username
      tags: [Users]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: username
          required: true
          schema: { type: string }
      responses:
        '200': { description: User found }

  /api/users/toggle-admin/{id}:
    put:
      summary: Toggle admin privileges for a user
      tags: [Users]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: User updated }

  /api/users/{id}:
    get:
      summary: Get user by ID
      tags: [Users]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: User found }
    put:
      summary: Update user by ID
      tags: [Users]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/User' }
      responses:
        '200': { description: User updated }
    delete:
      summary: Delete user by ID (admin only)
      tags: [Users]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: User deleted }

  /api/users/email/{email}:
    get:
      summary: Get user by email
      tags: [Users]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: email
          required: true
          schema: { type: string }
      responses:
        '200': { description: User found }

  /api/users/self/{id}:
    delete:
      summary: Delete own user account (self)
      tags: [Users]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Account deleted }

  /api/global-bills:
    post:
      summary: Create a new Global Bill
      tags: [GlobalBills]
      security: [ { bearerAuth: [] } ]
      responses:
        '201': { description: Global bill created }
    get:
      summary: Get all Global Bills
      tags: [GlobalBills]
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: List of global bills }

  /api/global-bills/{id}:
    get:
      summary: Get a Global Bill by ID
      tags: [GlobalBills]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Global bill found }
    put:
      summary: Update a Global Bill
      tags: [GlobalBills]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Global bill updated }
    delete:
      summary: Delete a Global Bill
      tags: [GlobalBills]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Global bill deleted }

  /api/bills:
    post:
      summary: Create a new Bill
      tags: [Bills]
      security: [ { bearerAuth: [] } ]
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Bill' }
      responses:
        '201': { description: Bill created successfully }
    get:
      summary: Get all Bills (admin)
      tags: [Bills]
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: List of bills
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Bill' }

  /api/bills/me:
    get:
      summary: Get bills of logged-in user
      tags: [Bills]
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: List of user bills
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Bill' }

  /api/bills/{id}/pay:
    patch:
      summary: Mark Bill as paid (user uploads receipt → status PENDING)
      tags: [Bills]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Bill moved to PENDING
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Bill' }

  /api/bills/{id}/approve:
    patch:
      summary: Approve Bill (admin → status PAID)
      tags: [Bills]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Bill approved and marked as PAID
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Bill' }

  /api/bills/{id}/cancel:
    patch:
      summary: Cancel Bill (admin → status CANCELED)
      tags: [Bills]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Bill canceled
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Bill' }

  /api/bills/{id}:
    put:
      summary: Update Bill (admin)
      tags: [Bills]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Bill' }
      responses:
        '200': { description: Bill updated }
    delete:
      summary: Delete Bill (admin)
      tags: [Bills]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Bill deleted }
